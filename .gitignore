# Include your project-specific ignores in this file
# Read about how to use .gitignore: https://help.github.com/articles/ignoring-files
# Useful .gitignore templates: https://github.com/github/gitignore

# Node
node_modules
npm-debug.log

# package-lock.json files that do not belong to the root
package-lock.json
!./package-lock.json

# Build, cache
dist
build-tmp
.cache
.esm-cache
.sass-cache
.tmp
.webpack-monitor
size-plugin.json
temp
.turbo
.build

# Code coverage
coverage
.nyc_output

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Editors
.idea
**/*.swp

# Env settings / local env files
.env
.env.local
.env.*.local

# Certificates
*.pem

# Other, system file
.DS_Store

# Local redis dump
dump.rdb

# Dummy data
dummy_user_data.json

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
# *.tfvars
# *.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Pre-commit hooks
providers-tmp.tf

# Structurizr
workspace.json
.structurizr/*
